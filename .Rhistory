#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Item Type",
y= "Count") +
theme_clean()
monster_books$`Item Type`<- factor(monster_books$`Item Type`, ordered = TRUE)
monster_books %>% ggplot(aes(`Item Type`)) +
geom_bar(color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Item Type",
y= "Count") +
theme_clean()
monster_books$`Item Type`<- factor(monster_books$`Item Type`, ordered = order())
monster_books$`Item Type`<- factor(monster_books$`Item Type`, levels = monster_books$`Item Type`[order(monster_books$`Item Type`, decreasing = TRUE)])
monster_books %>% ggplot(aes(`Item Type`)) +
geom_bar(color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Item Type",
y= "Count") +
theme_clean()
monster_books %>% ggplot(aes(Audiance)) +
geom_bar(stat = 'count', color = "black", fill = "red") +
scale_y_continuous(breaks = seq(0, 1200, by = 100),
limits = c(0, 1200)) +
labs(title = "Audiance",
y= "Count") +
theme_clean()
monster_books %>% ggplot(aes(`Item Type`)) +
geom_bar(stat = 'count',color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Item Type",
y= "Count") +
theme_clean()
class(monster_books$`Item Type`)
monster_books$`Item Type`<- factor(monster_books$`Item Type`)
class(monster_books$`Item Type`)
monster_books %>% ggplot(aes(`Item Type`)) +
geom_bar(stat = 'count',color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Item Type",
y= "Count") +
theme_clean()
reorder(monster_books$`Item Type`)
count(monster_books$`Item Type`)
sum(monster_books$`Item Type`)
count(monster_books$`Item Type`)
length(monster_books$`Item Type`)
range(monster_books$`Item Type`)
monster_books %>% group_by(`Item Type`) %>% summarise(n())
monster_books %>% group_by(`Item Type`) %>% summarise( count = n())
item_type_df <- monster_books %>% group_by(`Item Type`) %>% summarise(count = n())
item_type_df %>% ggplot(aes(`Item Type`)) +
geom_bar(stat = 'count',color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Item Type",
y= "Count") +
theme_clean()
item_type_df %>% ggplot(aes(`Item Type`, count)) +
geom_bar(stat = 'identity',color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Item Type",
y= "Count") +
theme_clean()
item_type_df %>% mutate(`Item Type` = fct_reorder(`Item Type`, count)) %>%
ggplot(aes(`Item Type`, count)) +
geom_bar(stat = 'identity',color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Item Type",
y= "Count") +
theme_clean()
item_type_df %>% mutate(`Item Type` = fct_reorder(`Item Type`, desc(count))) %>%
ggplot(aes(`Item Type`, count)) +
geom_bar(stat = 'identity',color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Item Type",
y= "Count") +
theme_clean()
item_type_df %>% mutate(`Item Type` = fct_reorder(`Item Type`, desc(count))) %>% # fct_reorder function to reorder the Item Type based on count
ggplot(aes(`Item Type`, count)) +
geom_bar(stat = 'identity',color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Item Type",
y= "Count") +
theme_clean() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
item_type_df %>% mutate(`Item Type` = fct_reorder(`Item Type`, desc(count))) %>% # fct_reorder function to reorder the Item Type based on count
ggplot(aes(`Item Type`, count)) +
geom_bar(stat = 'identity',color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Item Type",
y= "Count") +
theme_clean() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
library(tidyverse)
library(readxl)
library(stringr)
library(writexl)
library(ggthemes)
monster_books <- read_excel("Saved Data Files/Complete_Monster_List.xlsx")
item_type_df <- monster_books %>% group_by(`Item Type`) %>% summarise(count = n())
item_type_df %>% mutate(`Item Type` = fct_reorder(`Item Type`, desc(count))) %>% # fct_reorder function to reorder the Item Type based on count
ggplot(aes(`Item Type`, count)) +
geom_bar(stat = 'identity',color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Item Type",
y= "Count") +
theme_clean() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
item_type_df %>% mutate(`Item Type` = fct_reorder(`Item Type`, desc(count))) %>% # fct_reorder function to reorder the Item Type based on count
filter(`Item Type` != "Book") %>%
ggplot(aes(`Item Type`, count)) +
geom_bar(stat = 'identity',color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Item Type",
y= "Count") +
theme_clean() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
item_type_df %>% mutate(`Item Type` = fct_reorder(`Item Type`, desc(count))) %>% # fct_reorder function to reorder the Item Type based on count
filter(!`Item Type` %in% c("Book", "Unknown")) %>%     # Quick filter statement for increased clarity
ggplot(aes(`Item Type`, count)) +
geom_bar(stat = 'identity',color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Item Type",
y= "Count") +
theme_clean() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
rating_str <- "4.2 out of 5 stars, based on 83 ratings"
rating_str <- unlist(str_split(rating_str, pattern = ","))[1]
# Pattern that extracts either a decimal/integer as the first number. Don't need second number because it's always 5
# d represents any digit 0-9, | is the or operator that we're looking for a decimal or integer.
pattern <- "\\d+\\.\\d+|\\d+"
rating <- as.numeric(str_extract(rating_str, pattern)) # Make it in a numeric variable because why not?
rating
unlist(str_split(rating_str, pattern = ","))
str_split(rating_str, pattern = ",")
str_split(rating_str, pattern = ",")
unlist(str_split(rating_str, pattern = ","))[1]
str_split(rating_str, pattern = " "))
str_split(rating_str, pattern = " ")
str_split(rating_str, pattern = " ")[-1]
str_split(rating_str, pattern = " ")[[-1]]
unlist(str_split(rating_str, pattern = ","))[1]
unlist(str_split(rating_str, pattern = " "))[-1]
unlist(str_split(rating_str, pattern = " "))
rating_str <- "4.2 out of 5 stars, based on 83 ratings"
rating_str <- unlist(str_split(rating_str, pattern = " "))
rating_str <- "4.2 out of 5 stars, based on 83 ratings"
unlist(str_split(rating_str, pattern = " "))
unlist(str_split(rating_str, pattern = " "))[-1]
unlist(str_split(rating_str, pattern = " "))[-1]
unlist(str_split(rating_str, pattern = " "))[-1]
unlist(str_split(rating_str, pattern = " "))[-1]
unlist(str_split(rating_str, pattern = " "))[-1]
unlist(str_split(rating_str, pattern = " "))[-1]
unlist(str_split(rating_str, pattern = " "))[-1]
str_split(rating_str, pattern = " ")[-1]
unlist(str_split(rating_str, pattern = " "))
rating_str[1]
rating_str[[1]]
rating_str[[1]]
rating_str[[1]]
rating_str[[1]]
rating_str[[1]]
rating_str[[1]]
rating_str[[1]]
rating_str[[1]]
rating_str <- "4.2 out of 5 stars, based on 83 ratings"
str_split(rating_str, pattern = " ")
str_split(rating_str, pattern = " ")[1]
che<- str_split(rating_str, pattern = " ")
View(che)
che[[1]]
che[1]
che[1][1]
che[[1]][1]
che<- unlist(str_split(rating_str, pattern = " "))
che[[1]][1]
che[1]
che[-1]
che[1]
che[-1]
che[7:8]
che[:8]
che[8:8]
che[8]
che[-1]
che[8]
unliststr_split(rating_str, pattern = " ")[8]
unliststr_split(rating_str, pattern = " ")[8]
unliststr_split(rating_str, pattern = " ")[8])
unliststr_split(rating_str, pattern = " "[8])
unliststr_split(rating_str, pattern = " "[8]))
unlist(str_split(rating_str, pattern = " "))[8
unlist(str_split(rating_str, pattern = " "))[8]
str_split(rating_str, pattern = " ")[[1]][8]
as.numeric(str_extract(rating_str, pattern))
ifelse(str_split(monster_books$Rating, pattern = " ")[[1]][8] != 0, num_rate = as.numeric(str_extract(rating_str, pattern)), "No Ratings")
monster_books$Rating
num_rate <- ifelse(as.numeric(str_split(monster_books$Rating, pattern = " ")[[1]][8]) != 0, as.numeric(str_extract(rating_str, pattern = "\\d+")), "No Ratings")
as.numeric(str_extract(rating_str, pattern))
as.numeric(str_split(rating_str, " "))[[1]][8]
str_split(rating_str, " "))[[1]][8]
str_split(rating_str, " ")
str_split(rating_str, " "))[[1]][1]
str_split(rating_str, " ")[[1]][1]
str_split(rating_str, " ")[[1]][1]
ifelse(str_split(monster_books$Rating, pattern = " ")[[1]][8] != 0, num_rate = str_split(rating_str, " ")[[1]][1], "No Ratings")
monster_books <- monster_books %>%
mutate(num_rate = ifelse(str_split(monster_books$Rating, pattern = " ")[[1]][8] != 0, num_rate = str_split(rating_str, " ")[[1]][1], "No Ratings"))
monster_books <- monster_books %>%
mutate(num_rate = ifelse(str_split(Rating, pattern = " ")[[1]][8] != 0, str_split(rating_str, " ")[[1]][1], "No Ratings"))
View(monster_books)
monster_books <- monster_books %>%
mutate(num_rate = ifelse(as.numeric(str_split(Rating, pattern = " ")[[1]][8]) != 0, as.numeric(str_split(Rating, " ")[[1]][1]), "No Ratings"))
View(monster_books)
monster_books <- monster_books %>%
mutate(num_rate = ifelse(str_split(Rating, pattern = " ")[[1]][8] != 0, str_split(rating_str, " ")[[1]][1], "No Ratings"))
View(monster_books)
monster_books <- monster_books %>%
mutate(num_rate = ifelse(str_split(Rating, pattern = " ")[[1]][8] != 0, str_split(Rating, " ")[[1]][1], "No Ratings"))
View(monster_books)
monster_books <- monster_books %>%
rowwise() %>%
mutate(num_rate = ifelse(as.numeric(str_split(Rating, pattern = " ")[[1]][8]) != 0, as.numeric(str_split(Rating, " ")[[1]][1]), "No Ratings")) %>%
ungroup()
monster_books <- monster_books %>%
rowwise() %>%
mutate(num_rate = ifelse(as.numeric(str_split(Rating, pattern = " ")[[1]][8]) != 0, as.numeric(str_split(Rating, " ")[[1]][1]), "No Ratings"))
View(monster_books)
monster_books <- monster_books %>%
mutate(num_rate = ifelse(str_split(monster_books$Rating, pattern = " ")[[1]][8] != 0, str_split(monster_books$Rating, " ")[[1]][1], "No Ratings"))
View(monster_books)
monster_books <- monster_books %>%
mutate(num_rate = ifelse(str_split(monster_books$Rating, pattern = " ")[[1]][8] != 0, str_split(monster_books$Rating, " ")[[1]][1], NULL))
View(monster_books)
str_split(monster_books$Rating, pattern = " ")[[1]][8]
monster_books$Rating
str_split(monster_books$Rating, pattern = " ")
str_split(monster_books$Rating, pattern = " ")[[1]][8]
monster_books <- monster_books %>%
rowwise() %>%
mutate(num_rate = ifelse(as.numeric(str_split(Rating, pattern = " ")[[1]][8]) != 0, as.numeric(str_split(Rating, " ")[[1]][1]), "No Ratings")) %>%
ungroup()
monster_books <- monster_books %>%
mutate(num_rate = ifelse(as.numeric(str_split(Rating, pattern = " ")[[1]][8]) != 0,
as.numeric(str_split(Rating, pattern = " ")[[1]][1]),
"No Ratings"))
View(monster_books)
monster_books <- monster_books %>%
mutate(num_rate = ifelse(grepl("based on \\d+ ratings", Rating),
as.numeric(sub(".*based on (\\d+) ratings.*", "\\1", Rating)),
"No Ratings"))
View(monster_books)
monster_books <- monster_books %>%
mutate(num_rate = case_when(str_split(monster_books$Rating, pattern = " ")[[1]][8] != 0, str_split(monster_books$Rating, " ")[[1]][1], NULL))
monster_books <- monster_books %>%
mutate(num_rate = case_when(as.numeric(str_split(Rating, pattern = " ")[[1]][8]) != 0 ~ as.numeric(str_split(Rating, " ")[[1]][1]),
TRUE ~ NULL))
monster_books <- monster_books %>%
mutate(num_rate = case_when(as.numeric(str_split(Rating, pattern = " ")[[1]][8]) != 0 ~ as.numeric(str_split(Rating, " ")[[1]][1]),
TRUE ~ NA_real_))
View(monster_books)
library(tidyverse)
library(readxl)
library(stringr)
library(writexl)
library(ggthemes)
monster_books <- read_excel("Saved Data Files/Complete_Monster_List.xlsx")
View(monster_books)
# Dropping duplicate observations (same book in same staff list)
monster_books <- monster_books %>%
distinct(Link, `Staff List Name`, .keep_all = TRUE)  # columns where we drop duplicates, .keep_all function keeps all variables
#save the df back to the excel file if need be, no need to constatnly be removing the duplicate rows
#write_xlsx(monster_books, "Saved Data Files/monster_books_edited.xlsx")
# find core books that I've already scrapped within staff lists and then getting rid of the original core row
monster_books_woc <- monster_books %>%  filter(!(`Broad Genre` %in% c("Adult Core", "Teen Core", "Youth Core", "Picture Book Core")))
the_already_core <- monster_books_woc %>% filter(str_detect(`Specific Genre`, "KDL Core") | str_detect(Subject, "KDL Core")) %>% pull(Title)
the_already_core <- unique(the_already_core)
monster_books_ac <- monster_books %>% filter(`Broad Genre` %in% c("Adult Core", "Teen Core", "Youth Core", "Picture Book Core"))
inte <- 0
for (book in monster_books_ac$Title) {
if (!(book %in% the_already_core)){
print(book)
#inte <- inte + 1
#cat("Book:", book, "| Count:", inte, "\n")
monster_books_woc <- rbind(monster_books_woc, monster_books_ac[monster_books_ac$Title == book, ])
monster_books_woc$`Broad Genre`
}
}
# Checking the results
duplicate_books <- monster_books_woc %>% group_by(Link) %>% filter(n()> 1) %>% summarise(Title, `Item Type`, `Staff List Name`, SL_Link, n = n())
#Goes through each valuable core book in the df and attaches the core label in the Broad Genre variable
monster_books <- monster_books_woc
# Append string "Core" to the `Broad Genre` variable
monster_books <- monster_books %>%
mutate(`Broad Genre` = if_else(str_detect(Subject, "KDL Core") & !str_detect(`Broad Genre`, "Core"),
paste(`Broad Genre`, "Core", sep = ", "), `Broad Genre`))
# remove excess dfs and lists
rm(monster_books_woc, the_core, monster_books_ac, inte, duplicate_books)
#write_xlsx(monster_books, "Saved Data Files/monster_books_edited.xlsx")
View(monster_books)
# we only want 1 observation per book when looking at book statistics
monster_books <- monster_books %>%
distinct(Link, .keep_all = TRUE)
length(unique(monster_books$Link)) # all unique
monster_books %>% ggplot(aes(`Item Count`)) +
geom_histogram() +
#geom_density(alpha = .2, fill = "pink2") + geom_density also a nice way to visualize distribution
scale_x_continuous(breaks = seq(0, 150, by = 10),
limits = c(0, 150)) +
labs(title = "Item Count")
#boxplots w/ filtering
monster_books %>% filter(Holds < 3 &  `Item Count` < 20) %>%
ggplot(aes(`Item Count`)) +
geom_boxplot()
summary(monster_books$Holds)
summary(monster_books$`Item Count`)
# Audiance
monster_books %>% ggplot(aes(Audiance)) +
geom_bar(color = "black", fill = "red") +
scale_y_continuous(breaks = seq(0, 1200, by = 100),
limits = c(0, 1200)) +
labs(title = "Audiance",
y= "Count") +
theme_clean()
item_type_df <- monster_books %>% group_by(`Item Type`) %>% summarise(count = n())
item_type_df %>% mutate(`Item Type` = fct_reorder(`Item Type`, desc(count))) %>% # fct_reorder function to reorder the Item Type based on count
filter(!`Item Type` %in% c("Book", "Unknown")) %>%     # Quick filter statement for increased clarity
ggplot(aes(`Item Type`, count)) +
geom_bar(stat = 'identity',color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Item Type",
y= "Count") +
theme_clean() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
monster_books %>% ggplot(aes(`Item Count`)) +
geom_histogram() +
#geom_density(alpha = .2, fill = "pink2") + geom_density also a nice way to visualize distribution
scale_x_continuous(breaks = seq(0, 150, by = 10),
limits = c(0, 150)) +
labs(title = "Item Count")
monster_books %>% filter(Holds < 3 &  `Item Count` < 20) %>%
ggplot(aes(`Item Count`)) +
geom_boxplot()
summary(monster_books$Holds)
summary(monster_books$`Item Count`)
monster_books %>% ggplot(aes(Audiance)) +
geom_bar(color = "black", fill = "red") +
scale_y_continuous(breaks = seq(0, 1200, by = 100),
limits = c(0, 1200)) +
labs(title = "Audiance",
y= "Count") +
theme_clean()
item_type_df <- monster_books %>% group_by(`Item Type`) %>% summarise(count = n())
item_type_df %>% mutate(`Item Type` = fct_reorder(`Item Type`, desc(count))) %>% # fct_reorder function to reorder the Item Type based on count
filter(!`Item Type` %in% c("Book", "Unknown")) %>%     # Quick filter statement for increased clarity
ggplot(aes(`Item Type`, count)) +
geom_bar(stat = 'identity',color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Item Type",
y= "Count") +
theme_clean() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
View(monster_books)
# Tackling the rating variable
rating_str <- "4.2 out of 5 stars, based on 83 ratings"
str_split(rating_str, pattern = " ")[[1]][8]
str_split(rating_str, " ")[[1]][1]
# idk why this string pattern doesn't work grrrrrrrrrrrrrrrrrrrr
monster_books <- monster_books %>%
mutate(num_rate = case_when(str_split(monster_books$Rating, pattern = " ")[[1]][8] != 0, str_split(monster_books$Rating, " ")[[1]][1], NULL))
# Tackling the rating variable
rating_str <- "4.2 out of 5 stars, based on 83 ratings"
str_split(rating_str, pattern = " ")[[1]][8]
str_split(rating_str, " ")[[1]][1]
# idk why this string pattern doesn't work grrrrrrrrrrrrrrrrrrrr
monster_books <- monster_books %>%
mutate(num_rate = case_when(str_split(monster_books$Rating, pattern = " ")[[1]][8] != 0, str_split(monster_books$Rating, " ")[[1]][1], NULL))
# Tackling the rating variable
rating_str <- "4.2 out of 5 stars, based on 83 ratings"
str_split(rating_str, pattern = " ")[[1]][8]
str_split(rating_str, " ")[[1]][1]
# idk why this string pattern doesn't work grrrrrrrrrrrrrrrrrrrr
monster_books <- monster_books %>%
mutate(num_rate = elseif(str_split(monster_books$Rating, pattern = " ")[[1]][8] != 0, str_split(monster_books$Rating, " ")[[1]][1], NULL))
# Tackling the rating variable
rating_str <- "4.2 out of 5 stars, based on 83 ratings"
str_split(rating_str, pattern = " ")[[1]][8]
str_split(rating_str, " ")[[1]][1]
# idk why this string pattern doesn't work grrrrrrrrrrrrrrrrrrrr
monster_books <- monster_books %>%
mutate(num_rate = ifelse(str_split(monster_books$Rating, pattern = " ")[[1]][8] != 0, str_split(monster_books$Rating, " ")[[1]][1], NULL))
# Pattern that extracts either a decimal/integer as the first number. Don't need second number because it's always 5
# d represents any digit 0-9, | is the or operator that we're looking for a decimal or integer.
pattern <- "\\d+\\.\\d+|\\d+"
rating <- as.numeric(str_extract(rating_str, pattern)) # Make it in a numeric variable because why not?
rating
View(monster_books)
mutate(num_rate = ifelse(str_split(monster_books$Rating, pattern = " ")[[1]][8] != 0, str_split(monster_books$Rating, " ")[[1]][1], NULL))
# Broad Genre
monster_books %>% ggplot(aes(`Broad Genre`)) +
geom_bar(color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Audiance",
y= "Count") +
theme_clean()
monster_books %>% ggplot(aes(`Broad Genre`)) +
geom_bar(color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Audiance",
y= "Count") +
theme_clean() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
monster_books %>% group_by(`Broad Genre`) %>% summarise(count = n()) %>%
ggplot(aes(`Broad Genre`, count)) +
geom_bar(color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Audiance",
y= "Count") +
theme_clean() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
monster_books %>% group_by(`Broad Genre`) %>% summarise(count = n()) %>%
ggplot(aes(`Broad Genre`, count)) +
geom_bar(stat = 'identity', color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Audiance",
y= "Count") +
theme_clean() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
monster_books %>% group_by(`Broad Genre`) %>% summarise(count = n()) %>%
mutate(`Broad Genre` = fct_reorder(`Broad Genre`, desc(count))) %>%
ggplot(aes(`Broad Genre`, count)) +
geom_bar(stat = 'identity', color = "black", fill = "red") +
#scale_y_continuous(breaks = seq(0, 1200, by = 100),
#                    limits = c(0, 1200)) +
labs(title = "Audiance",
y= "Count") +
theme_clean() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
library(tidyverse)
library(readxl)
library(stringr)
library(writexl)
library(ggthemes)
monster_books <- read_excel("Saved Data Files/Complete_Monster_List.xlsx")
View(monster_books)
monster_books <- monster_books %>%
distinct(Link, .keep_all = TRUE)
View(monster_books)
library(tidyverse)
library(readxl)
library(stringr)
library(writexl)
library(ggthemes)
monster_books <- read_excel("Saved Data Files/Complete_Monster_List.xlsx")
# Dropping duplicate observations (same book in same staff list)
monster_books <- monster_books %>%
distinct(Link, `Staff List Name`, .keep_all = TRUE)  # columns where we drop duplicates, .keep_all function keeps all variables
#save the df back to the excel file if need be, no need to constatnly be removing the duplicate rows
#write_xlsx(monster_books, "Saved Data Files/monster_books_edited.xlsx")
# Finding all the duplicate books and their various staff lists
duplicate_books <- monster_books %>% group_by(Link) %>% filter(n()> 1) %>% summarise(Title, `Item Type`, `Staff List Name`, SL_Link, n = n())
#Counting the total number of duplicate books in our df
length(unique(duplicate_books$Link))
duplicate_books <- arrange(duplicate_books, Title, `Staff List Name`) # The more appearances here, the more popular the book?
View(duplicate_books)
monster_books_woc <- monster_books %>%  filter(!(`Broad Genre` %in% c("Adult Core", "Teen Core", "Youth Core", "Picture Book Core")))
the_already_core <- monster_books_woc %>% filter(str_detect(`Specific Genre`, "KDL Core") | str_detect(Subject, "KDL Core")) %>% pull(Title)
the_already_core <- unique(the_already_core)
monster_books_ac <- monster_books %>% filter(`Broad Genre` %in% c("Adult Core", "Teen Core", "Youth Core", "Picture Book Core"))
inte <- 0
for (book in monster_books_ac$Title) {
if (!(book %in% the_already_core)){
print(book)
#inte <- inte + 1
#cat("Book:", book, "| Count:", inte, "\n")
monster_books_woc <- rbind(monster_books_woc, monster_books_ac[monster_books_ac$Title == book, ])
monster_books_woc$`Broad Genre`
}
}
# Checking the results
duplicate_books <- monster_books_woc %>% group_by(Link) %>% filter(n()> 1) %>% summarise(Title, `Item Type`, `Staff List Name`, SL_Link, n = n())
View(duplicate_books)
monster_books <- monster_books_woc
# Append string "Core" to the `Broad Genre` variable
monster_books <- monster_books %>%
mutate(`Broad Genre` = if_else(str_detect(Subject, "KDL Core") & !str_detect(`Broad Genre`, "Core"),
paste(`Broad Genre`, "Core", sep = ", "), `Broad Genre`))
# remove excess dfs and lists
rm(monster_books_woc, the_core, monster_books_ac, inte, duplicate_books)
#write_xlsx(monster_books, "Saved Data Files/monster_books_edited.xlsx")
View(monster_books)
write_xlsx(monster_books, "Saved Data Files/monster_books_edited.xlsx")
