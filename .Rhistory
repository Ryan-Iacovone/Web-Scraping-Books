library(tidyverse)
library(ggthemes)
library(readxl)
library(writexl)
#prints <- read_excel("C:/Users/Ryan/Coding Projects/KDL Project/3D Printing analysis/Data/EGR KDL Master 3D Printing List.xlsx")
#Loading in the excel file when 3d printing analysis is set as working directory
prints <- read_excel("C:/Users/Ryan/Coding Projects/KDL Project/3D Printing analysis/Data/EGR KDL Master 3D Printing List.xlsx")
#Filtering the data based on date - 9/6/23 is when all of our colors were added to the form for patrons to choose
#prints <- prints %>% filter(completion_time >= as.Date("2023-04-13"))
#Wrangling the data to be in pie chart format
pies <- prints %>% count(print)
pies$percent_NOP <- pies$n / sum(pies$n) * 100
pies$print <- as.character(pies$print)
pies1 <- pies %>% head(20)
# Create the pie chart
ggplot(pies1, aes(x = "", y = percent_NOP, fill = print)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(round(percent_NOP), "%")),
position = position_jitterdodge(jitter.width = 0.2, dodge.width = .8),
size = 4) +
#geom_text(aes(label = paste0(round(percent_NOP), "%")), position = position_stack(vjust = 0.5)) +
#scale_fill_brewer(palette = "Dark2", name = "Number of People per Group") +
labs(
title = "Study Rooms Requests by Group Size"
) +
theme_void()
#ggsave(one, file = "C:/Users/Ryan/Coding Projects/KDL Project/3D Printing analysis/pie.png")
#Still really difficult to see graphically so will make a table
ggplot(prints, aes(x = print)) +
geom_bar()
table_prints <- table(prints$print)
table_counts_df <- as.data.frame(table_prints)
# Rename the columns in the data frame
colnames(table_counts_df) <- c("Print", "Count")
table_counts_df <- arrange(table_counts_df, desc(Count))
print(table_counts_df)
#write_xlsx(table_counts_df, "prints list after.xlsx")
#I filter out ID number 210 here because that was an outlier for contacting the person
prints <- prints %>% mutate(turnaround = as.Date(contacted_date) - as.Date(completion_time)) %>% filter(ID != 210)
#looking at turnaround time as a difftime variable
class(prints$turnaround)
summary(prints$turnaround, na.rm = TRUE)
mean(prints$turnaround, na.rm = TRUE)
#Changing turnaround variable to a numeric variable for a more standard analysis
prints$turnaround <- as.numeric(prints$turnaround)
summary(prints$turnaround, na.rm = TRUE)
mean_turnaround <- mean(prints$turnaround, na.rm = TRUE)
print(paste0("On average, it took us ", round(mean_turnaround, 2), " days to complete a patrons print once they requested it"))
emails_fails <- sum(prints$invalid_email == "X", na.rm = TRUE)
emails_fails <- round(emails_fails / length(prints$failed), digits = 2)
print(paste0(emails_fails * 100, "%", " patrons inputted email addresses were flagged failed by the program"))
#prints <- prints %>% filter(completion_time >= as.Date("2023-04-01") & completion_time <= as.Date("2023-04-30"))
fails <- sum(prints$failed == "X", na.rm = TRUE)
fail_percent <- round(fails / length(prints$failed), digits = 2)
print(paste0(fail_percent * 100, "%", " of our total print requests failed"))
picked_up <- sum(prints$picked_up == "X", na.rm = TRUE)
picked_up <- round(picked_up / length(prints$picked_up), digits = 3)
print(paste0("Of the completed print rquests, ", picked_up * 100, "%", " of patrons have picked up their 3D prints"))
prints$adult <- ifelse(is.na(prints$caregiver_name), "Adult", "Child")
#Saving graphs
#ggsave(one, file = "C:/Users/Ryan/Coding Projects/KDL Project/3D Printing analysis")
write_xlsx(prints, "completed prints.xlsx")
library(tidyverse)
library(readxl)
library(stringr)
monster_books <- read_excel("Saved Data Files/Complete_Monster_List.xlsx")
View(monster_books)
subject <- "Itliong, Larry, 1913-1977 — Juvenile literature, United Farm Workers of America — History — Juvenile literature, Labor leaders — United States — Biography — Juvenile literature, Filipino Americans — Biography — Juvenile literature, Agricultural laborers — Labor unions — United States — History — Biography — Juvenile literature, Discrimination - Kids, Southern Asian/Indian - Kids, Asian American - Kids"
str_split(subject, pattern = ",")
list(str_split(subject, pattern = ","))
unlist(str_split(subject, pattern = ","))
beep <- unlist(str_split(subject, pattern = ","))
beep[1]
class(beep)
unlist(str_split(rating, pattern = ","))
rating <- "4.2 out of 5 stars, based on 83 ratings"
beep <- unlist(str_split(rating, pattern = ","))
beep
unlist(str_split(rating, pattern = ","))
rates <- unlist(str_split(rating, pattern = ","))
rates[1]
input_string <- "4.2 out of 5 stars"
numbers_only <- str_extract(input_string, "\\d+\\.\\d+|\\d+")
# Print the result
print(numbers_only)
numbers_only
library(tidyverse)
library(readxl)
library(stringr)
monster_books <- read_excel("Saved Data Files/Complete_Monster_List.xlsx")
# Testing for how to parse subject and genre columns
subject <- "Itliong, Larry, 1913-1977 — Juvenile literature, United Farm Workers of America — History — Juvenile literature, Labor leaders — United States — Biography — Juvenile literature, Filipino Americans — Biography — Juvenile literature, Agricultural laborers — Labor unions — United States — History — Biography — Juvenile literature, Discrimination - Kids, Southern Asian/Indian - Kids, Asian American - Kids"
beep <- unlist(str_split(subject, pattern = ",")) # using unlist here creates a character vector from a list (simpler indexing)
class(beep)
#Parsing for ratings
rating_str <- "4.2 out of 5 stars, based on 83 ratings"
# Pattern that extracts either a decimal/integer as the first number. Don't need second number because it's always 5
# d represents any digit 0-9, | is the or operator that we're looking for a decimal or integer.
pattern <- "\\d+\\.\\d+|\\d+"
rating <- unlist(str_split(rating, pattern = ","))
rating <- unlist(str_split(rating, pattern = ","))
rating <- (str_split(rating, pattern = ","))
rating <- str_split(rating, pattern = ",")
pattern <- "\\d+\\.\\d+|\\d+"
rating <- str_split(rating, pattern)
rating <- str_split(rating_str, pattern)
rating
initial_rating <- unlist(str_split(subject, pattern = ","))
rating_str <- "4.2 out of 5 stars, based on 83 ratings"
initial_rating <- unlist(str_split(rating_str, pattern = ","))
initial_rating
unlist(str_split(rating_str, pattern = ","))[0]
unlist(str_split(rating_str, pattern = ","))[1]
initial_rating <- unlist(str_split(rating_str, pattern = ","))[1]
initial_rating
rating_str <- "4.2 out of 5 stars, based on 83 ratings"
rating_str <- unlist(str_split(rating_str, pattern = ","))[1]
# Pattern that extracts either a decimal/integer as the first number. Don't need second number because it's always 5
# d represents any digit 0-9, | is the or operator that we're looking for a decimal or integer.
pattern <- "\\d+\\.\\d+|\\d+"
rating <- str_split(rating_str, pattern)
rating
rating_str
rating_str <- unlist(str_split(rating_str, pattern = ","))[1]
# Pattern that extracts either a decimal/integer as the first number. Don't need second number because it's always 5
# d represents any digit 0-9, | is the or operator that we're looking for a decimal or integer.
pattern <- "\\d+\\.\\d+|\\d+"
rating <- str_split(rating_str, pattern)
rating
rating_str
unlist(str_split(rating_str, pattern = ","))[1]
rating
input_string <- "4.2 out of 5 stars"
numbers_only <- str_extract(input_string, "\\d+\\.\\d+|\\d+")
# Print the result
print(numbers_only)
pattern <- "\\d+\\.\\d+|\\d+"
rating <- str_extract(rating_str, pattern)
rating
as.numeric(rating)
# Testing for how to parse subject and genre columns
subject <- "Itliong, Larry, 1913-1977 — Juvenile literature, United Farm Workers of America — History — Juvenile literature, Labor leaders — United States — Biography — Juvenile literature, Filipino Americans — Biography — Juvenile literature, Agricultural laborers — Labor unions — United States — History — Biography — Juvenile literature, Discrimination - Kids, Southern Asian/Indian - Kids, Asian American - Kids"
beep <- unlist(str_split(subject, pattern = ",")) # using unlist here creates a character vector from a list (simpler indexing)
class(beep)
#Parsing for ratings
rating_str <- "4.2 out of 5 stars, based on 83 ratings"
rating_str <- unlist(str_split(rating_str, pattern = ","))[1]
# Pattern that extracts either a decimal/integer as the first number. Don't need second number because it's always 5
# d represents any digit 0-9, | is the or operator that we're looking for a decimal or integer.
pattern <- "\\d+\\.\\d+|\\d+"
rating <- as.numeric(str_extract(rating_str, pattern)) # Make it in a numeric variable because why not?
rating
View(monster_books)
View(monster_books)
# Status and Item type counts
monster_books %>% group_by(`Item Type`) %>% summarise(count = n())%>% arrange(desc(count))
monster_books %>% group_by(Status) %>% summarise(count = n())%>% arrange(desc(count))
View(monster_books)
library(tidyverse)
library(readxl)
library(stringr)
monster_books <- read_excel("Saved Data Files/Complete_Monster_List.xlsx")
View(monster_books)
library(tidyverse)
library(readxl)
library(stringr)
monster_books <- read_excel("Saved Data Files/Complete_Monster_List.xlsx")
View(monster_books)
# Finding all the duplicate books
monster_books %>% group_by(Link) %>% filter(n()> 1)
# Status and Item type counts
monster_books %>% group_by(`Item Type`) %>% summarise(count = n())%>% arrange(desc(count))
monster_books %>% group_by(Status) %>% summarise(count = n())%>% arrange(desc(count))
# Testing for how to parse subject and genre columns
subject <- "Itliong, Larry, 1913-1977 — Juvenile literature, United Farm Workers of America — History — Juvenile literature, Labor leaders — United States — Biography — Juvenile literature, Filipino Americans — Biography — Juvenile literature, Agricultural laborers — Labor unions — United States — History — Biography — Juvenile literature, Discrimination - Kids, Southern Asian/Indian - Kids, Asian American - Kids"
beep <- unlist(str_split(subject, pattern = ",")) # using unlist here creates a character vector from a list (simpler indexing)
#Parsing for ratings
rating_str <- "4.2 out of 5 stars, based on 83 ratings"
rating_str <- unlist(str_split(rating_str, pattern = ","))[1]
# Pattern that extracts either a decimal/integer as the first number. Don't need second number because it's always 5
# d represents any digit 0-9, | is the or operator that we're looking for a decimal or integer.
pattern <- "\\d+\\.\\d+|\\d+"
rating <- as.numeric(str_extract(rating_str, pattern)) # Make it in a numeric variable because why not?
rating
monster_books %>% group_by(`Staff List Name`) %>% summarise(`Staff List Name`, n=n())
# Grouping by staff list to ensure we're getting them all
monster_books %>% group_by(`Staff List Name`) %>% summarise( n=n())
# Filtering by staff list
monster_books %>% filter(`Staff List Name` = "January Staff Picks")
# Filtering by staff list
monster_books %>% filter(`Staff List Name` == "January Staff Picks")
# Filtering by staff list
monster_books %>% filter(`Staff List Name` == "Let It Snow - Celebrity Book Club")
# Filtering by staff list
monster_books %>% filter(`Staff List Name` == "Let It Snow - Teen: Funny Fiction")
# Filtering by staff list
monster_books %>% filter(`Staff List Name` == "Put Some Shiver in Your Summer!")
# Filtering by staff list
monster_books %>% filter(`Staff List Name` == "Paint and Pop October 2023")
# Filtering by staff list
monster_books %>% filter(`Staff List Name` == "The Nightingale")
# Filtering by staff list
monster_books %>% filter(`Staff List Name` == "Healthy Living Books")
# Filtering by staff list
monster_books %>% filter(`Staff List Name` == "Historical Fiction Audiobooks")
library(tidyverse)
library(readxl)
library(stringr)
monster_books <- read_excel("Saved Data Files/Complete_Monster_List.xlsx")
# Grouping by staff list to ensure we're getting them all
monster_books %>% group_by(`Staff List Name`) %>% summarise(n=n())
# Filtering by staff list
monster_books %>% filter(`Staff List Name` == "Celebrate Winter Holidays!")
# Grouping by staff list to ensure we're getting them all
monster_books %>% group_by(`Staff List Name`) %>% summarise(n=n())
library(tidyverse)
library(readxl)
library(stringr)
monster_books <- read_excel("Saved Data Files/Complete_Monster_List.xlsx")
View(monster_books)
View(monster_books)
monster_books %>% ggplot(aes(`Item Count`)) +
geom_bar
monster_books %>% ggplot(aes(`Item Count`)) +
geom_bar()
monster_books %>% ggplot(aes(Holds)) +
geom_bar()
monster_books %>% ggplot(aes(Holds)) +
geom_bar()
monster_books %>% ggplot(aes(`Item Count`)) +
geom_bar() +
labs(title = "Item Count")
monster_books %>% ggplot(aes(Holds)) +
geom_bar() +
labs(title = "Holds")
# Working with numeric variables
monster_books %>% ggplot(aes(`Item Count`)) +
geom_bar() +
scale_x_continuous(breaks = seq(0, 150, by = 10),
limits = c(0, 150))
labs(title = "Item Count")
monster_books %>% ggplot(aes(Holds)) +
geom_bar() +
labs(title = "Holds")
# Working with numeric variables
monster_books %>% ggplot(aes(`Item Count`)) +
geom_histogram() +
scale_x_continuous(breaks = seq(0, 150, by = 10),
limits = c(0, 150))
labs(title = "Item Count")
monster_books %>% ggplot(aes(Holds)) +
geom_bar() +
labs(title = "Holds")
monster_books %>% ggplot(aes(`Item Count`)) +
geom_histogram() +
scale_x_continuous(breaks = seq(0, 150, by = 10),
limits = c(0, 150))
labs(title = "Item Count")
monster_books %>% ggplot(aes(`Item Count`)) +
geom_histogram() +
scale_x_continuous(breaks = seq(0, 150, by = 10),
limits = c(0, 150)) +
labs(title = "Item Count")
monster_books %>% ggplot(aes(Holds)) +
geom_histogram() +
scale_x_continuous(breaks = seq(0, 150, by = 10),
limits = c(0, 150)) +
labs(title = "Holds")
# Working with numeric variables
monster_books %>% ggplot(aes(`Item Count`)) +
geom_histogram() +
scale_x_continuous(breaks = seq(0, 150, by = 10),
limits = c(0, 150)) +
labs(title = "Item Count")
monster_books %>% ggplot(aes(Holds)) +
geom_histogram() +
#scale_x_continuous(breaks = seq(0, 150, by = 10),
# limits = c(0, 150)) +
labs(title = "Holds")
# Working with numeric variables
monster_books %>% ggplot(aes(`Item Count`)) +
geom_histogram() +
scale_x_continuous(breaks = seq(0, 150, by = 10),
limits = c(0, 150)) +
labs(title = "Item Count")
monster_books %>% ggplot(aes(Holds)) +
geom_histogram() +
scale_x_continuous(breaks = seq(0, 150, by = 10),
limits = c(0, 150)) +
labs(title = "Holds")
# Working with numeric variables
monster_books %>% ggplot(aes(`Item Count`)) +
geom_histogram() +
scale_x_continuous(breaks = seq(0, 150, by = 10),
limits = c(0, 150)) +
labs(title = "Item Count")
monster_books %>% ggplot(aes(Holds)) +
geom_bar() +
scale_x_continuous(breaks = seq(0, 150, by = 10),
limits = c(0, 150)) +
labs(title = "Holds")
# Working with numeric variables
monster_books %>% ggplot(aes(`Item Count`)) +
geom_histogram() +
scale_x_continuous(breaks = seq(0, 150, by = 10),
limits = c(0, 150)) +
labs(title = "Item Count")
monster_books %>% ggplot(aes(Holds)) +
geom_bar() +
#scale_x_continuous(breaks = seq(0, 150, by = 10),
# limits = c(0, 150)) +
labs(title = "Holds")
monster_books %>% ggplot(aes(Holds)) +
geom_boxplot()
monster_books %>% ggplot(aes(`Item Count`)) +
geom_boxplot()
monster_books %>% filter(Holds < 100 &  `Item Count` < 100) %>%
ggplot(aes(Holds)) +
geom_boxplot()
monster_books %>% filter(Holds < 15 &  `Item Count` < 100) %>%
ggplot(aes(Holds)) +
geom_boxplot()
monster_books %>% filter(Holds < 3 &  `Item Count` < 100) %>%
ggplot(aes(Holds)) +
geom_boxplot()
monster_books %>% filter(Holds < 3 &  `Item Count` < 100) %>%
ggplot(aes(`Item Count`)) +
geom_boxplot()
monster_books %>% filter(Holds < 3 &  `Item Count` < 20) %>%
ggplot(aes(`Item Count`)) +
geom_boxplot()
monster_books %>% ggplot(aes(`Item Count`)) +
geom_histogram() +
geom_density(alpha = .2, fill = "pink2") +
scale_x_continuous(breaks = seq(0, 150, by = 10),
limits = c(0, 150)) +
labs(title = "Item Count")
monster_books %>% ggplot(aes(`Item Count`)) +
geom_density(alpha = .2, fill = "pink2") +
scale_x_continuous(breaks = seq(0, 150, by = 10),
limits = c(0, 150)) +
labs(title = "Item Count")
# Working with numeric variables (distributions)
monster_books %>% ggplot(aes(`Item Count`)) +
geom_histogram() +
geom_density(alpha = .2, fill = "pink2") +
scale_x_continuous(breaks = seq(0, 150, by = 10),
limits = c(0, 150)) +
labs(title = "Item Count")
monster_books %>% ggplot(aes(Holds)) +
geom_bar() +
#scale_x_continuous(breaks = seq(0, 150, by = 10),
# limits = c(0, 150)) +
labs(title = "Holds")
#boxplots w/ filtering
monster_books %>% filter(Holds < 3 &  `Item Count` < 20) %>%
ggplot(aes(`Item Count`)) +
geom_boxplot()
# Finding all the duplicate books
monster_books %>% group_by(Link) %>% filter(n()> 1)
# Finding all the duplicate books
monster_books %>% group_by(Link) %>% filter(n()> 1) %>% summarise(n=n())
# Finding all the duplicate books
monster_books %>% group_by(Link) %>% filter(n()> 1)
# Finding all the duplicate books
trials <- monster_books %>% group_by(Link) %>% filter(n()> 1)
View(trials)
trials %>% summarise(Title, `Item Type`, `Staff List Name`, n = n())
# Finding all the duplicate books
trials <- monster_books %>% group_by(Link) %>% filter(n()> 1)
trials %>% summarise(`Staff List Name`, n = n())
# Finding all the duplicate books
trials <- monster_books %>% group_by(Link) %>% filter(n()> 1)
trials %>% summarise(Title, `Item Type`, `Staff List Name`, n = n())
# Finding all the duplicate books
trials <- monster_books %>% group_by(Link) %>% filter(n()> 1) %>% summarise(Title, `Item Type`, `Staff List Name`, n = n())
View(trials)
# Finding all the duplicate books
trials <- monster_books %>% group_by(Link) %>% filter(n()> 1) %>% summarise(Title, `Item Type`, `Staff List Name`, n)
View(trials)
# Finding all the duplicate books
trials <- monster_books %>% group_by(Link) %>% filter(n()> 1) %>% summarise(Title, `Item Type`, `Staff List Name`, n = n())
View(trials)
# Finding all the duplicate books
trials <- monster_books %>% group_by(Link) %>% filter(n()> 1) %>% summarise(Title, `Item Type`, `Staff List Name`, SL_Link, n = n())
View(trials)
unqique(trials$Link)
unique(trials$Link)
count(unique(trials$Link))
sum(unique(trials$Link))
library(stringr)
chr_count(unique(trials$Link))
str_count(unique(trials$Link))
sum(str_count(unique(trials$Link)))
count((str_count(unique(trials$Link))))
str_count(unique(trials$Link))
unique(trials$Link)
beep <- unique(trials$Link)
unique(trials$Link)
str_count(unique(trials$Link))
length(unique(trials$Link)))
length(unique(trials$Link))
View(trials)
library(tidyverse)
library(readxl)
library(stringr)
monster_books <- read_excel("Saved Data Files/Complete_Monster_List.xlsx")
# Finding all the duplicate books
duplicate_books <- monster_books %>% group_by(Link) %>% filter(n()> 1) %>% summarise(Title, `Item Type`, `Staff List Name`, SL_Link, n = n())
#Counting the total number of duplicate books in our df
length(unique(trials$Link))
length(unique(trials$Link))
# Finding all the duplicate books
duplicate_books <- monster_books %>% group_by(Link) %>% filter(n()> 1) %>% summarise(Title, `Item Type`, `Staff List Name`, SL_Link, n = n())
#Counting the total number of duplicate books in our df
length(unique(duplicate_books$Link))
View(duplicate_books)
library(tidyverse)
library(readxl)
library(stringr)
monster_books <- read_excel("Saved Data Files/Complete_Monster_List.xlsx")
# Finding all the duplicate books
duplicate_books <- monster_books %>% group_by(Link) %>% filter(n()> 1) %>% summarise(Title, `Item Type`, `Staff List Name`, SL_Link, n = n())
#Counting the total number of duplicate books in our df
length(unique(duplicate_books$Link))
View(duplicate_books)
library(tidyverse)
library(readxl)
library(stringr)
monster_books <- read_excel("Saved Data Files/Complete_Monster_List.xlsx")
# Finding all the duplicate books
duplicate_books <- monster_books %>% group_by(Link) %>% filter(n()> 1) %>% summarise(Title, `Item Type`, `Staff List Name`, SL_Link, n = n())
#Counting the total number of duplicate books in our df
length(unique(duplicate_books$Link))
View(duplicate_books)
View(monster_books)
str_match(monster_books, "Fantasy fiction")
library(tidyverse)
library(readxl)
library(stringr)
monster_books <- read_excel("Saved Data Files/Complete_Monster_List.xlsx")
# Grouping by staff list to ensure we're getting them all
monster_books %>% group_by(`Staff List Name`) %>% summarise(n=n())
# Filtering by staff list
monster_books %>% filter(`Staff List Name` == "Celebrate Winter Holidays!")
# Working with numeric variables (distributions)
monster_books %>% ggplot(aes(`Item Count`)) +
geom_histogram() +
#geom_density(alpha = .2, fill = "pink2") + geom_density also a nice way to visualize distribution
scale_x_continuous(breaks = seq(0, 150, by = 10),
limits = c(0, 150)) +
labs(title = "Item Count")
monster_books %>% ggplot(aes(Holds)) +
geom_bar() +
#scale_x_continuous(breaks = seq(0, 150, by = 10),
# limits = c(0, 150)) +
labs(title = "Holds")
#boxplots w/ filtering
monster_books %>% filter(Holds < 3 &  `Item Count` < 20) %>%
ggplot(aes(`Item Count`)) +
geom_boxplot()
# Finding all the duplicate books
duplicate_books <- monster_books %>% group_by(Link) %>% filter(n()> 1) %>% summarise(Title, `Item Type`, `Staff List Name`, SL_Link, n = n())
#Counting the total number of duplicate books in our df
length(unique(duplicate_books$Link))
# Status and Item type counts
monster_books %>% group_by(`Item Type`) %>% summarise(count = n())%>% arrange(desc(count))
monster_books %>% group_by(Status) %>% summarise(count = n())%>% arrange(desc(count))
# Testing for how to parse subject and genre columns
subject <- "Itliong, Larry, 1913-1977 — Juvenile literature, United Farm Workers of America — History — Juvenile literature, Labor leaders — United States — Biography — Juvenile literature, Filipino Americans — Biography — Juvenile literature, Agricultural laborers — Labor unions — United States — History — Biography — Juvenile literature, Discrimination - Kids, Southern Asian/Indian - Kids, Asian American - Kids"
beep <- unlist(str_split(subject, pattern = ",")) # using unlist here creates a character vector from a list (simpler indexing)
#Parsing for ratings
rating_str <- "4.2 out of 5 stars, based on 83 ratings"
rating_str <- unlist(str_split(rating_str, pattern = ","))[1]
# Pattern that extracts either a decimal/integer as the first number. Don't need second number because it's always 5
# d represents any digit 0-9, | is the or operator that we're looking for a decimal or integer.
pattern <- "\\d+\\.\\d+|\\d+"
rating <- as.numeric(str_extract(rating_str, pattern)) # Make it in a numeric variable because why not?
rating
library(readxl)
library(tidyverse)
# Read Excel files
complete_extra_info_SL_monster <- read_excel("C:/Users/Ryan/Coding Projects/Web Scraping/Saved Data Files/complete_extra_info_SL_monster.xlsx")
Complete_Monster_List <- read_excel("C:/Users/Ryan/Coding Projects/Web Scraping/Saved Data Files/Complete_Monster_List.xlsx")
# Extract rows with NA item_id
Complete_Monster_List_na <- Complete_Monster_List[is.na(Complete_Monster_List$item_id), ]
Complete_Monster_List_na$item_id <- sapply(strsplit(Complete_Monster_List_na$Link, "C"), function(x) x[[2]])
# Merge DataFrames
BIGBOI <- merge(Complete_Monster_List_na, complete_extra_info_SL_monster, by = "item_id")
View(Complete_Monster_List_na)
View(complete_extra_info_SL_monster)
